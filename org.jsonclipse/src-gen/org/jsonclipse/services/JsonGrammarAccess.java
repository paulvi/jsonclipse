/*
* generated by Xtext
*/
package org.jsonclipse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JsonGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRootAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootValueParserRuleCall_0 = (RuleCall)cRootAssignment.eContents().get(0);
		
		//Model:
		//
		//	root=Value;
		public ParserRule getRule() { return rule; }

		//root=Value
		public Assignment getRootAssignment() { return cRootAssignment; }

		//Value
		public RuleCall getRootValueParserRuleCall_0() { return cRootValueParserRuleCall_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFalseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Assignment cObjectValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cObjectValueObjectParserRuleCall_3_0 = (RuleCall)cObjectValueAssignment_3.eContents().get(0);
		private final Assignment cArrayValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cArrayValueArrayParserRuleCall_4_0 = (RuleCall)cArrayValueAssignment_4.eContents().get(0);
		private final Assignment cNumberValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNumberValueNumberParserRuleCall_5_0 = (RuleCall)cNumberValueAssignment_5.eContents().get(0);
		private final Assignment cStringValueAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_6_0 = (RuleCall)cStringValueAssignment_6.eContents().get(0);
		
		//Value:
		//
		//	"false" | "null" | "true" | objectValue=Object | arrayValue=Array | numberValue=Number | stringValue=STRING;
		public ParserRule getRule() { return rule; }

		//"false" | "null" | "true" | objectValue=Object | arrayValue=Array | numberValue=Number | stringValue=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"false"
		public Keyword getFalseKeyword_0() { return cFalseKeyword_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }

		//objectValue=Object
		public Assignment getObjectValueAssignment_3() { return cObjectValueAssignment_3; }

		//Object
		public RuleCall getObjectValueObjectParserRuleCall_3_0() { return cObjectValueObjectParserRuleCall_3_0; }

		//arrayValue=Array
		public Assignment getArrayValueAssignment_4() { return cArrayValueAssignment_4; }

		//Array
		public RuleCall getArrayValueArrayParserRuleCall_4_0() { return cArrayValueArrayParserRuleCall_4_0; }

		//numberValue=Number
		public Assignment getNumberValueAssignment_5() { return cNumberValueAssignment_5; }

		//Number
		public RuleCall getNumberValueNumberParserRuleCall_5_0() { return cNumberValueNumberParserRuleCall_5_0; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_6() { return cStringValueAssignment_6; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_6_0() { return cStringValueSTRINGTerminalRuleCall_6_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Number returns ecore::EString:
		//
		//	"-"? INT ("." INT)? (("e" | "E") ("+" | "-")? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)? (("e" | "E") ("+" | "-")? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//(("e" | "E") ("+" | "-")? INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"e" | "E"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"e"
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//"E"
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOBJECT_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPropertiesObjectPropertyParserRuleCall_1_0_0 = (RuleCall)cPropertiesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cVALUE_SEPTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPropertiesObjectPropertyParserRuleCall_1_1_1_0 = (RuleCall)cPropertiesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cOBJECT_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Object:
		//
		//	OBJECT_START (properties+=ObjectProperty (VALUE_SEP properties+=ObjectProperty)*)? OBJECT_END;
		public ParserRule getRule() { return rule; }

		//OBJECT_START (properties+=ObjectProperty (VALUE_SEP properties+=ObjectProperty)*)? OBJECT_END
		public Group getGroup() { return cGroup; }

		//OBJECT_START
		public RuleCall getOBJECT_STARTTerminalRuleCall_0() { return cOBJECT_STARTTerminalRuleCall_0; }

		//(properties+=ObjectProperty (VALUE_SEP properties+=ObjectProperty)*)?
		public Group getGroup_1() { return cGroup_1; }

		//properties+=ObjectProperty
		public Assignment getPropertiesAssignment_1_0() { return cPropertiesAssignment_1_0; }

		//ObjectProperty
		public RuleCall getPropertiesObjectPropertyParserRuleCall_1_0_0() { return cPropertiesObjectPropertyParserRuleCall_1_0_0; }

		//(VALUE_SEP properties+=ObjectProperty)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//VALUE_SEP
		public RuleCall getVALUE_SEPTerminalRuleCall_1_1_0() { return cVALUE_SEPTerminalRuleCall_1_1_0; }

		//properties+=ObjectProperty
		public Assignment getPropertiesAssignment_1_1_1() { return cPropertiesAssignment_1_1_1; }

		//ObjectProperty
		public RuleCall getPropertiesObjectPropertyParserRuleCall_1_1_1_0() { return cPropertiesObjectPropertyParserRuleCall_1_1_1_0; }

		//OBJECT_END
		public RuleCall getOBJECT_ENDTerminalRuleCall_2() { return cOBJECT_ENDTerminalRuleCall_2; }
	}

	public class ObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cPropNameAssignment_0.eContents().get(0);
		private final RuleCall cNAME_SEPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPropValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropValueValueParserRuleCall_2_0 = (RuleCall)cPropValueAssignment_2.eContents().get(0);
		
		//ObjectProperty:
		//
		//	propName=STRING NAME_SEP propValue=Value;
		public ParserRule getRule() { return rule; }

		//propName=STRING NAME_SEP propValue=Value
		public Group getGroup() { return cGroup; }

		//propName=STRING
		public Assignment getPropNameAssignment_0() { return cPropNameAssignment_0; }

		//STRING
		public RuleCall getPropNameSTRINGTerminalRuleCall_0_0() { return cPropNameSTRINGTerminalRuleCall_0_0; }

		//NAME_SEP
		public RuleCall getNAME_SEPTerminalRuleCall_1() { return cNAME_SEPTerminalRuleCall_1; }

		//propValue=Value
		public Assignment getPropValueAssignment_2() { return cPropValueAssignment_2; }

		//Value
		public RuleCall getPropValueValueParserRuleCall_2_0() { return cPropValueValueParserRuleCall_2_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cARRAY_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsValueParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cVALUE_SEPTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsValueParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		private final RuleCall cARRAY_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Array:
		//
		//	ARRAY_START (elements+=Value (VALUE_SEP elements+=Value)*)? ARRAY_END;
		public ParserRule getRule() { return rule; }

		//ARRAY_START (elements+=Value (VALUE_SEP elements+=Value)*)? ARRAY_END
		public Group getGroup() { return cGroup; }

		//ARRAY_START
		public RuleCall getARRAY_STARTTerminalRuleCall_0() { return cARRAY_STARTTerminalRuleCall_0; }

		//(elements+=Value (VALUE_SEP elements+=Value)*)?
		public Group getGroup_1() { return cGroup_1; }

		//elements+=Value
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//Value
		public RuleCall getElementsValueParserRuleCall_1_0_0() { return cElementsValueParserRuleCall_1_0_0; }

		//(VALUE_SEP elements+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//VALUE_SEP
		public RuleCall getVALUE_SEPTerminalRuleCall_1_1_0() { return cVALUE_SEPTerminalRuleCall_1_1_0; }

		//elements+=Value
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }

		//Value
		public RuleCall getElementsValueParserRuleCall_1_1_1_0() { return cElementsValueParserRuleCall_1_1_1_0; }

		//ARRAY_END
		public RuleCall getARRAY_ENDTerminalRuleCall_2() { return cARRAY_ENDTerminalRuleCall_2; }
	}
	
	
	private ModelElements pModel;
	private ValueElements pValue;
	private NumberElements pNumber;
	private ObjectElements pObject;
	private ObjectPropertyElements pObjectProperty;
	private ArrayElements pArray;
	private TerminalRule tARRAY_START;
	private TerminalRule tARRAY_END;
	private TerminalRule tOBJECT_START;
	private TerminalRule tOBJECT_END;
	private TerminalRule tNAME_SEP;
	private TerminalRule tVALUE_SEP;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.jsonclipse.Json".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	root=Value;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Value:
	//
	//	"false" | "null" | "true" | objectValue=Object | arrayValue=Array | numberValue=Number | stringValue=STRING;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Number returns ecore::EString:
	//
	//	"-"? INT ("." INT)? (("e" | "E") ("+" | "-")? INT)?;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Object:
	//
	//	OBJECT_START (properties+=ObjectProperty (VALUE_SEP properties+=ObjectProperty)*)? OBJECT_END;
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//ObjectProperty:
	//
	//	propName=STRING NAME_SEP propValue=Value;
	public ObjectPropertyElements getObjectPropertyAccess() {
		return (pObjectProperty != null) ? pObjectProperty : (pObjectProperty = new ObjectPropertyElements());
	}
	
	public ParserRule getObjectPropertyRule() {
		return getObjectPropertyAccess().getRule();
	}

	//Array:
	//
	//	ARRAY_START (elements+=Value (VALUE_SEP elements+=Value)*)? ARRAY_END;
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//terminal ARRAY_START:
	//
	//	"[";
	public TerminalRule getARRAY_STARTRule() {
		return (tARRAY_START != null) ? tARRAY_START : (tARRAY_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARRAY_START"));
	} 

	//terminal ARRAY_END:
	//
	//	"]";
	public TerminalRule getARRAY_ENDRule() {
		return (tARRAY_END != null) ? tARRAY_END : (tARRAY_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARRAY_END"));
	} 

	//terminal OBJECT_START:
	//
	//	"{";
	public TerminalRule getOBJECT_STARTRule() {
		return (tOBJECT_START != null) ? tOBJECT_START : (tOBJECT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJECT_START"));
	} 

	//terminal OBJECT_END:
	//
	//	"}";
	public TerminalRule getOBJECT_ENDRule() {
		return (tOBJECT_END != null) ? tOBJECT_END : (tOBJECT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJECT_END"));
	} 

	//terminal NAME_SEP:
	//
	//	":";
	public TerminalRule getNAME_SEPRule() {
		return (tNAME_SEP != null) ? tNAME_SEP : (tNAME_SEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAME_SEP"));
	} 

	//terminal VALUE_SEP:
	//
	//	",";
	public TerminalRule getVALUE_SEPRule() {
		return (tVALUE_SEP != null) ? tVALUE_SEP : (tVALUE_SEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALUE_SEP"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

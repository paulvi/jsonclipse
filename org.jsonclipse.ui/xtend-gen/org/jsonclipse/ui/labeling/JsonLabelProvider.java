/**
 * generated by Xtext
 */
package org.jsonclipse.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.jsonclipse.json.Array;
import org.jsonclipse.json.ObjectProperty;
import org.jsonclipse.json.Value;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
@SuppressWarnings("all")
public class JsonLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public JsonLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final Value value) {
    String _xifexpression = null;
    org.jsonclipse.json.Object _objectValue = value.getObjectValue();
    boolean _notEquals = ObjectExtensions.operator_notEquals(_objectValue, null);
    if (_notEquals) {
      String _xblockexpression = null;
      {
        org.jsonclipse.json.Object _objectValue_1 = value.getObjectValue();
        EList<ObjectProperty> _properties = _objectValue_1.getProperties();
        for (final ObjectProperty prop : _properties) {
          boolean _and = false;
          String _propName = prop.getPropName();
          boolean _equalsIgnoreCase = "name".equalsIgnoreCase(_propName);
          if (!_equalsIgnoreCase) {
            _and = false;
          } else {
            Value _propValue = prop.getPropValue();
            String _stringValue = _propValue.getStringValue();
            boolean _notEquals_1 = ObjectExtensions.operator_notEquals(_stringValue, null);
            _and = (_equalsIgnoreCase && _notEquals_1);
          }
          if (_and) {
            String _propName_1 = prop.getPropName();
            String _plus = (_propName_1 + ": ");
            Value _propValue_1 = prop.getPropValue();
            String _stringValue_1 = _propValue_1.getStringValue();
            return (_plus + _stringValue_1);
          } else {
            boolean _and_1 = false;
            String _propName_2 = prop.getPropName();
            boolean _equalsIgnoreCase_1 = "id".equalsIgnoreCase(_propName_2);
            if (!_equalsIgnoreCase_1) {
              _and_1 = false;
            } else {
              Value _propValue_2 = prop.getPropValue();
              String _stringValue_2 = _propValue_2.getStringValue();
              boolean _notEquals_2 = ObjectExtensions.operator_notEquals(_stringValue_2, null);
              _and_1 = (_equalsIgnoreCase_1 && _notEquals_2);
            }
            if (_and_1) {
              String _propName_3 = prop.getPropName();
              String _plus_1 = (_propName_3 + ": ");
              Value _propValue_3 = prop.getPropValue();
              String _stringValue_3 = _propValue_3.getStringValue();
              return (_plus_1 + _stringValue_3);
            }
          }
        }
        org.jsonclipse.json.Object _objectValue_2 = value.getObjectValue();
        EList<ObjectProperty> _properties_1 = _objectValue_2.getProperties();
        for (final ObjectProperty prop_1 : _properties_1) {
          boolean _and_2 = false;
          Value _propValue_4 = prop_1.getPropValue();
          boolean _notEquals_3 = ObjectExtensions.operator_notEquals(_propValue_4, null);
          if (!_notEquals_3) {
            _and_2 = false;
          } else {
            Value _propValue_5 = prop_1.getPropValue();
            String _stringValue_4 = _propValue_5.getStringValue();
            boolean _notEquals_4 = ObjectExtensions.operator_notEquals(_stringValue_4, null);
            _and_2 = (_notEquals_3 && _notEquals_4);
          }
          if (_and_2) {
            String _propName_4 = prop_1.getPropName();
            String _plus_2 = (_propName_4 + ": ");
            Value _propValue_6 = prop_1.getPropValue();
            String _stringValue_5 = _propValue_6.getStringValue();
            return (_plus_2 + _stringValue_5);
          }
        }
        _xblockexpression = ("Object");
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xifexpression_1 = null;
      Array _arrayValue = value.getArrayValue();
      boolean _notEquals_1 = ObjectExtensions.operator_notEquals(_arrayValue, null);
      if (_notEquals_1) {
        _xifexpression_1 = "Array";
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String text(final ObjectProperty prop) {
    String _propName = prop.getPropName();
    return _propName;
  }
  
  public String image(final Value value) {
    String _xifexpression = null;
    org.jsonclipse.json.Object _objectValue = value.getObjectValue();
    boolean _notEquals = ObjectExtensions.operator_notEquals(_objectValue, null);
    if (_notEquals) {
      _xifexpression = "o.gif";
    } else {
      String _xifexpression_1 = null;
      Array _arrayValue = value.getArrayValue();
      boolean _notEquals_1 = ObjectExtensions.operator_notEquals(_arrayValue, null);
      if (_notEquals_1) {
        _xifexpression_1 = "a.gif";
      } else {
        _xifexpression_1 = null;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String image(final ObjectProperty prop) {
    String _xifexpression = null;
    Value _propValue = prop.getPropValue();
    boolean _notEquals = ObjectExtensions.operator_notEquals(_propValue, null);
    if (_notEquals) {
      Value _propValue_1 = prop.getPropValue();
      String _image = this.image(_propValue_1);
      _xifexpression = _image;
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
}

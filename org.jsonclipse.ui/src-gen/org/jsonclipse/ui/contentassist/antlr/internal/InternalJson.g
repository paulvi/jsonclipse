/*
* generated by Xtext
*/
grammar InternalJson;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.jsonclipse.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.jsonclipse.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.jsonclipse.services.JsonGrammarAccess;

}

@parser::members {
 
 	private JsonGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JsonGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getRootAssignment()); }
(rule__Model__RootAssignment)
{ after(grammarAccess.getModelAccess().getRootAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObject
entryRuleObject 
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectAccess().getGroup()); }
(rule__Object__Group__0)
{ after(grammarAccess.getObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObjectProperty
entryRuleObjectProperty 
:
{ before(grammarAccess.getObjectPropertyRule()); }
	 ruleObjectProperty
{ after(grammarAccess.getObjectPropertyRule()); } 
	 EOF 
;

// Rule ObjectProperty
ruleObjectProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectPropertyAccess().getGroup()); }
(rule__ObjectProperty__Group__0)
{ after(grammarAccess.getObjectPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArray
entryRuleArray 
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayAccess().getGroup()); }
(rule__Array__Group__0)
{ after(grammarAccess.getArrayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getFalseKeyword_0()); }

	'false' 

{ after(grammarAccess.getValueAccess().getFalseKeyword_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNullKeyword_1()); }

	'null' 

{ after(grammarAccess.getValueAccess().getNullKeyword_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getTrueKeyword_2()); }

	'true' 

{ after(grammarAccess.getValueAccess().getTrueKeyword_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getObjectValueAssignment_3()); }
(rule__Value__ObjectValueAssignment_3)
{ after(grammarAccess.getValueAccess().getObjectValueAssignment_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getArrayValueAssignment_4()); }
(rule__Value__ArrayValueAssignment_4)
{ after(grammarAccess.getValueAccess().getArrayValueAssignment_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNumberValueAssignment_5()); }
(rule__Value__NumberValueAssignment_5)
{ after(grammarAccess.getValueAccess().getNumberValueAssignment_5()); }
)

    |(
{ before(grammarAccess.getValueAccess().getStringValueAssignment_6()); }
(rule__Value__StringValueAssignment_6)
{ after(grammarAccess.getValueAccess().getStringValueAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFLOATTerminalRuleCall_0()); }
	RULE_FLOAT
{ after(grammarAccess.getNumberAccess().getFLOATTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Object__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getOBJECT_STARTTerminalRuleCall_0()); }
	RULE_OBJECT_START
{ after(grammarAccess.getObjectAccess().getOBJECT_STARTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__1__Impl
	rule__Object__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getGroup_1()); }
(rule__Object__Group_1__0)?
{ after(grammarAccess.getObjectAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getOBJECT_ENDTerminalRuleCall_2()); }
	RULE_OBJECT_END
{ after(grammarAccess.getObjectAccess().getOBJECT_ENDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Object__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group_1__0__Impl
	rule__Object__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getPropertiesAssignment_1_0()); }
(rule__Object__PropertiesAssignment_1_0)
{ after(grammarAccess.getObjectAccess().getPropertiesAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getGroup_1_1()); }
(rule__Object__Group_1_1__0)*
{ after(grammarAccess.getObjectAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Object__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group_1_1__0__Impl
	rule__Object__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getVALUE_SEPTerminalRuleCall_1_1_0()); }
	RULE_VALUE_SEP
{ after(grammarAccess.getObjectAccess().getVALUE_SEPTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getPropertiesAssignment_1_1_1()); }
(rule__Object__PropertiesAssignment_1_1_1)
{ after(grammarAccess.getObjectAccess().getPropertiesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ObjectProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectProperty__Group__0__Impl
	rule__ObjectProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectPropertyAccess().getPropNameAssignment_0()); }
(rule__ObjectProperty__PropNameAssignment_0)
{ after(grammarAccess.getObjectPropertyAccess().getPropNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectProperty__Group__1__Impl
	rule__ObjectProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectPropertyAccess().getNAME_SEPTerminalRuleCall_1()); }
	RULE_NAME_SEP
{ after(grammarAccess.getObjectPropertyAccess().getNAME_SEPTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectPropertyAccess().getPropValueAssignment_2()); }
(rule__ObjectProperty__PropValueAssignment_2)
{ after(grammarAccess.getObjectPropertyAccess().getPropValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Array__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getARRAY_STARTTerminalRuleCall_0()); }
	RULE_ARRAY_START
{ after(grammarAccess.getArrayAccess().getARRAY_STARTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getGroup_1()); }
(rule__Array__Group_1__0)?
{ after(grammarAccess.getArrayAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getARRAY_ENDTerminalRuleCall_2()); }
	RULE_ARRAY_END
{ after(grammarAccess.getArrayAccess().getARRAY_ENDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Array__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_1__0__Impl
	rule__Array__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getElementsAssignment_1_0()); }
(rule__Array__ElementsAssignment_1_0)
{ after(grammarAccess.getArrayAccess().getElementsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getGroup_1_1()); }
(rule__Array__Group_1_1__0)*
{ after(grammarAccess.getArrayAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Array__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_1_1__0__Impl
	rule__Array__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getVALUE_SEPTerminalRuleCall_1_1_0()); }
	RULE_VALUE_SEP
{ after(grammarAccess.getArrayAccess().getVALUE_SEPTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getElementsAssignment_1_1_1()); }
(rule__Array__ElementsAssignment_1_1_1)
{ after(grammarAccess.getArrayAccess().getElementsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__RootAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRootValueParserRuleCall_0()); }
	ruleValue{ after(grammarAccess.getModelAccess().getRootValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ObjectValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getObjectValueObjectParserRuleCall_3_0()); }
	ruleObject{ after(grammarAccess.getValueAccess().getObjectValueObjectParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ArrayValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getArrayValueArrayParserRuleCall_4_0()); }
	ruleArray{ after(grammarAccess.getValueAccess().getArrayValueArrayParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__NumberValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getNumberValueNumberParserRuleCall_5_0()); }
	ruleNumber{ after(grammarAccess.getValueAccess().getNumberValueNumberParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__StringValueAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringValueSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getValueAccess().getStringValueSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Object__PropertiesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getPropertiesObjectPropertyParserRuleCall_1_0_0()); }
	ruleObjectProperty{ after(grammarAccess.getObjectAccess().getPropertiesObjectPropertyParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Object__PropertiesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getPropertiesObjectPropertyParserRuleCall_1_1_1_0()); }
	ruleObjectProperty{ after(grammarAccess.getObjectAccess().getPropertiesObjectPropertyParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectProperty__PropNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectPropertyAccess().getPropNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getObjectPropertyAccess().getPropNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectProperty__PropValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectPropertyAccess().getPropValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getObjectPropertyAccess().getPropValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ElementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getElementsValueParserRuleCall_1_0_0()); }
	ruleValue{ after(grammarAccess.getArrayAccess().getElementsValueParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ElementsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getElementsValueParserRuleCall_1_1_1_0()); }
	ruleValue{ after(grammarAccess.getArrayAccess().getElementsValueParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ARRAY_START : '[';

RULE_ARRAY_END : ']';

RULE_OBJECT_START : '{';

RULE_OBJECT_END : '}';

RULE_NAME_SEP : ':';

RULE_VALUE_SEP : ',';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX : ('a'..'f'|'A'..'F'|'0'..'9');

fragment RULE_E : ('e'|'E');

fragment RULE_EXPONENT : RULE_E ('+'|'-')? RULE_DIGIT+;

RULE_FLOAT : (RULE_INT RULE_EXPONENT|RULE_INT '.' RULE_DIGIT* RULE_EXPONENT?);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


